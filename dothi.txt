Mạng máy tính (kiểm tra liên thông từ s -> t;

#include <bits/stdc++.h>
using namespace std;
const int N=1e5+7;
bool visited[N]{false};
vector<int> a[N];
void dfs(int u){
    visited[u]=true;
    for(int x:a[u]){
        if(!visited[x]){
            dfs(x);
        }
    }
}
void check(int s,int t){
    dfs(s);
    if(!visited[t]){
        cout<<"no";
    }else{
        cout<<"yes";
    }
}
int main(){
    int n,m,k;
    cin>>n>>m>>k;
    for(int i=1;i<=m;i++){
        int u,v;
        cin>>u>>v;
        a[u].push_back(v);
        a[v].push_back(u);
    }
    check(n,k);
}
               
============================================================================================================================================

Thành phần liên thông trong đồ thị
#include <bits/stdc++.h>
using namespace std;
const int N=1e5+7;
bool visited[N]{false};
vector<int> a[N];
int n,m;
void dfs(int u){
    visited[u]=true;
    for(int x:a[u]){
        if(!visited[x]){
            dfs(x);
        }
    }
}
void tplt(){
    int dem=0;
    for(int i=1;i<=n;i++){
        if(!visited[i]){
            dfs(i);
            dem++;
        }
    }
    cout<<dem;
}
int main(){
    cin>>n>>m;
    for(int i=1;i<=m;i++){
        int u,v;
        cin>>u>>v;
        a[u].push_back(v);
        a[v].push_back(u);
    }
    tplt();
}
========================================================================================================

  LIỆT KÊ Thành phần liên thông trong đồ thị
#include <bits/stdc++.h>
using namespace std;
const int N=1e5+3;
bool visited[N];
vector<int> a[N];
int n,m;
void dfs(int u, vector<int>& tp){
    visited[u]=true;
    tp.push_back(u);
    for(int v:a[u]){
        if(!visited[v]){
            dfs(v,tp);
        }
    }
}
int main(){
    cin>>n>>m;
    for(int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        a[u].push_back(v);
        a[v].push_back(u);
    }

    for(int i=1;i<=n;i++){
        sort(a[i].begin(),a[i].end());
    }
    for(int i=1;i<=n;i++){
        if(!visited[i]){
            vector<int> tp;
            dfs(i,tp);
            sort(tp.begin(),tp.end());
            for(int x:tp){
                cout<<x<<" ";
            }
            cout<<endl;
        }
    }
}
=============================================================================================================================
              
GUI TIN NHAN

#include <bits/stdc++.h>
using namespace std;
const int N=1e5+7;
bool visited[N]{false};
int n,m;
vector<int> a[N];
void dfs(int u){
    visited[u]=true;
    for(int x:a[u]){
        if(!visited[x]){
            dfs(x);
        }
    }
}
void tplt(){
    int dem=0;
    for(int i=1;i<=n;i++){
        if(!visited[i]){
            dfs(i);
            dem++;
        }
    }
    cout<<dem;
}
int main(){
    cin>>n>>m;
    for(int i=1;i<=m;i++){
        int u,v;
        cin>>u>>v;
        a[u].push_back(v);
        a[v].push_back(u);
    }
    tplt();
}

=========================== ================================================================================

KET BẠN (k full quá thời gian)


#include <bits/stdc++.h>
using namespace std;
const int N=1e5+7;
bool visited[N]{false};
int n,m,k;
vector<int> a[N];
void dfs(int u){
    visited[u]=true;
    for(int x:a[u]){
        if(!visited[x]){
            dfs(x);
        }
    }
}
int main(){
    ios::sync_with_stdio(false); 
    cin.tie(nullptr);  
    cin>>n>>k>>m;
    for(int i=1;i<=m;i++){
        int u,v;
        cin>>u>>v;
        a[u].push_back(v);
        a[v].push_back(u);
    }
    dfs(k);
    int dem=0;
    for(int i=1;i<=n;i++){
        if(visited[i]){
            dem++;
        }
    }
    cout<<dem-1;
}


==========================================================================================

CHÚ BÒ HƯ HỎNG


#include <bits/stdc++.h>
using namespace std;
const int N=1e5+7;
bool visited[N];
vector<int> a[N];
void dfs(int u){
    visited[u]=true;
    for(int x:a[u]){
        if(!visited[x]){
            dfs(x);
        }
    }
}
int main(){
    int n,m;
    cin>>n>>m;
    for(int i=1;i<=m;i++){
        int u,v;
        cin>>u>>v;
        a[u].push_back(v);
        a[v].push_back(u);
    }
    dfs(1);
    for(int i=1;i<=n;i++){
        if(!visited[i]){
            cout<<i<<endl;
        }
    }
}

===================================================================================================

NHOM BAN

#include <bits/stdc++.h>
using namespace std;
const int N=10e5+7;
vector <int> e[N];
int dem=0;
bool vi[N];
void dfs(int u){
    dem++;
    vi[u]=1;
    for(int v:e[u]){
        if(!vi[v]){
            dfs(v);
        }
    }
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n,m;
    cin>>n>>m;
    int u,v;
    for(int i=1;i<=m;i++){
        cin>>u>>v;
        e[u].push_back(v);
        e[v].push_back(u);
    }
    int res=0;
    for(int i=1;i<=n;i++){
        if(!vi[i]){
            dem=0;
            dfs(i);
            res=max(dem,res);
        }
    }
    cout<<res;
}



=====================================================================================

XAY CAU


#include <bits/stdc++.h>
using namespace std;
const int N=1e5+7;
vector<int> e[N];
bool vi[N];
void dfs(int u){
    vi[u]=1;
    for (int v:e[u]) {
        if(!vi[v]){
            dfs(v);
        }
    }
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int n,m;
    cin>>n>>m;
    int u,v;
    for(int i=1;i<=m;i++){
        cin>>u>>v;
        e[u].push_back(v);
        e[v].push_back(u); 
    }
    int dem=0; 
    for(int i=1;i<=n;i++) {
        if (!vi[i]){ 
            dem++;
            dfs(i);
        }
    }
    cout<<dem-1;
}

=================================================================
==================LOANG========================================

MIỀN LIÊN THÔNG

#include<bits/stdc++.h>
using namespace std;
#define ii pair<int, int>
const int N=1e3+3;
int n, m, ans, dem, s;
int a[N][N];
int dx[]= {-1, 0, 1, 0};
int dy[]={0, 1, 0, -1};
void loangbfs (int i, int j)
{
    dem=0;
    queue <ii> q;
    q.push({i, j});
    a[i][j]=1;
    while (!q.empty())
    {
        ii top = q.front();
        q.pop();
        dem++;
        for (int k=0; k<4; k++)
        {
            int i1= top.first+ dx[k];
            int j1= top.second +dy[k];
            if (i1>=1 && i1<=m && j1>=1 && j1<=n && a[i1][j1]==0)
            {
                q.push({i1, j1});
                a[i1][j1]=1;
               // dem++;
                            }
        }

    }
 if (dem>ans) ans= dem;
}
int main()
{
    cin>>m>>n;
    for (int i=1; i<=m; i++)
        for (int j=1; j<=n; j++)
            cin>>a[i][j];
    for (int i=1; i<=m; i++)
        for (int j=1; j<=n; j++)
            if (a[i][j]==0)
        {
                loangbfs(i, j);
                  s++;
        }
        cout<<s<<'\n'<<ans;
}

-===================================================================

Dầu loang
#include <bits/stdc++.h>
#define ii pair<int,int>
using namespace std;
const int N=1e3+3;
int a[N][N],ans[N];
int dx[]={0,-1,0,1};
int dy[]={-1,0,1,0};
int n,m,k=0;
int loang_bfs(int i,int j){
    int dem=0;
    queue<ii> q;
    q.push({i,j});
    a[i][j]=0;
    while(!q.empty()){
        ii top=q.front();
        q.pop();
        dem++;
        for(int k=0;k<4;k++){
            int i1=top.first+dx[k];
            int j1=top.second+dy[k];
            if(i1<1||i1>n||j1<1||j1>m){
                continue;
            }
            if(a[i1][j1]==1){
                a[i1][j1]=0;
                q.push({i1,j1});
            }
        }
    }
    return dem;
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>a[i][j];
        }
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(a[i][j]==1){
                ans[++k]=loang_bfs(i,j);
            }
        }
    }
    cout<<k<<endl;
    sort(ans+1,ans+1+k);
    map<int,int> mp;
    for(int i=1;i<=k;i++){
        mp[ans[i]]++;
    }
    for(auto x:mp){
        cout<<x.first<<" "<<x.second<<endl;
    }
}
========================================================


DEM SO PHONG


#include<bits/stdc++.h>
using namespace std;
#define ii pair<int, int>
const int N=1e3+3;
int n, m, ans, dem, s;
char a[N][N];
int dx[]= {-1, 0, 1, 0};
int dy[]={0, 1, 0, -1};
void loangbfs (int i, int j)
{
    dem=0;
    queue <ii> q;
    q.push({i, j});
    a[i][j]='.';
    while (!q.empty())
    {
        ii top = q.front();
        q.pop();
        dem++;
        for (int k=0; k<4; k++)
        {
            int i1= top.first+ dx[k];
            int j1= top.second +dy[k];
            if (i1>=1 && i1<=m && j1>=1 && j1<=n && a[i1][j1]=='.')
            {
                q.push({i1, j1});
                a[i1][j1]='#';

                            }
        }

    }
 if (dem>ans) ans= dem;
}
int main()
{
    cin>>m>>n;
    for (int i=1; i<=m; i++)
        for (int j=1; j<=n; j++)
            cin>>a[i][j];
    for (int i=1; i<=m; i++)
        for (int j=1; j<=n; j++)
            if (a[i][j]=='.')
        {
                loangbfs(i, j);
                  s++;
        }
        cout<<s;
}
============================================================


Miền trên bảng


#include <bits/stdc++.h>
#define ii pair<int,int>
using namespace std;
const int N=1e2+3;
int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};
int a[N][N];
bool vi[N][N];
int ans,s,dem,n,m;
void loang(int i,int j){
    s=0;
    queue<ii> q;
    q.push({i,j});
    vi[i][j]=1;
    while(!q.empty()){
        ii top=q.front();
        q.pop();
        s++;
        for(int k=0;k<4;k++){
            int i1=top.first+dx[k];
            int j1=top.second+dy[k];
            if(i1>=1 && i1<=m && j1<=n && j1>=1 && vi[i1][j1]==0 && a[i][j]==a[i1][j1]){
                q.push({i1,j1});
                vi[i1][j1]=1;
            }
        }
    }
}
int hang,cot;
int main(){
    cin>>m>>n;
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            cin>>a[i][j];
        }
    }
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(!vi[i][j]){
                dem++;
                loang(i,j);
                if(s>ans){
                    ans=s;
                    hang=i;
                    cot=j;
                }
            }
        }
    }
    cout<<dem<<endl;
    cout<<ans<<" "<<hang<<" "<<cot;
}
==============================================================
Xe buyt

#include <bits/stdc++.h>
using namespace std;
int bfs(int n, int A, int B, const vector<vector<int>>& adj) {
    vector<int> d(n+1);
    queue<int> q;
    d[A] = 0;
    q.push(A);
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int v : adj[u]) {
            if (!d[v]) {
                d[v] = d[u] + 1;
                q.push(v);
                if (v == B) return d[v] - 1;
            }
        }
    }
    return -1;
}
int main() {
    int n, A, B;
    cin >> n >> A >> B;
    vector<vector<int>> adj(n + 1);
    for(int i = 1; i <= n; i++){
        int x, y; cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    int res = bfs(n, A, B, adj);
    cout << res << endl;
    return 0;
}
=============================================================================
BAI CO



#include <bits/stdc++.h>
#define ii pair<int,int>
using namespace std;
const int N=1e3+7;
char a[N][N];
bool vi[N][N];
int dx[]={-1,0,0,1};
int dy[]={0,-1,1,0};
int n,m;
void loang(int i,int j){
    queue<ii>q;
    q.push({i,j});
    vi[i][j]=true;
    while(!q.empty()){
        ii top=q.front();
        q.pop();
        for(int k=0;k<4;k++){
            int i1=top.first+dx[k];
            int j1=top.second+dy[k];
            if(i1>=1 && i1<=n && j1>=1 && j1<=m && a[i1][j1]=='#' && !vi[i1][j1]){
                q.push({i1,j1});
                vi[i1][j1]=true;
            }
        }
    }
}
int main(){
    int dem=0;
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>a[i][j];
        }
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(a[i][j]=='#' && !vi[i][j]){
                loang(i,j);
                dem++;
            }
        }
    }
    cout<<dem++;
}


===================================================================================

CHUOT




#include <bits/stdc++.h>
#define ii pair<int,int>
using namespace std;
const int N=1e3+7;
bool vi[N][N];
char a[N][N];
int dx[]={-1,0,0,1};
int dy[]={0,-1,1,0};
int n,m,ans;
void loang(int i,int j){
    queue<ii> q;
    q.push({i,j});
    vi[i][j]=true;
    int dem=0;
    while(!q.empty()){
        ii top=q.front();
        q.pop();
        dem++;
        for(int k=0;k<4;k++){
            int i1=top.first+dx[k];
            int j1=top.second+dy[k];
            if(i1>=1 && i1<=n && j1>=1 && j1<=m && a[i1][j1]=='1' && !vi[i1][j1]){
                q.push({i1,j1});
                vi[i1][j1]=true;
            }
        }
    }
    if(dem>ans){
        ans=dem;
    }
}

int main(){
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>a[i][j];
        }
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(a[i][j]=='1' && !vi[i][j]){
                loang(i,j);
            }
        }
    }
    cout<<ans;
}




===============================================================================
CHIEN TRANH


#include <bits/stdc++.h>
#define ii pair<int,int>
using namespace std;
const int N=1e3+7;
int a[N][N];
int dx[]={-1,0,0,1};
int dy[]={0,-1,1,0};
int n,m,datlien;

void loang(int i,int j){
    queue<ii> q;
    q.push({i,j});
    a[i][j]=0; // Phá hủy ô đất hiện tại
    datlien--; // Giảm diện tích đất liền
    while(!q.empty()){
        ii top=q.front();
        q.pop();
        for(int k=0;k<4;k++){
            int i1=top.first+dx[k];
            int j1=top.second+dy[k];
            if(i1>=1&&i1<=n&&j1>=1&&j1<=m&&a[i1][j1]==1){
                q.push({i1,j1});
                a[i1][j1]=0; // Phá hủy ô đất lân cận
                datlien--; // Giảm diện tích đất liền
            }
        }
    }
}

int main(){
    int attack;
    cin>>n>>m>>attack;
    datlien=0;

    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>a[i][j];
            if(a[i][j]==1){
                datlien++;
            }
        }
    }

    for(int i=1;i<=attack;i++){
        int u,v;
        cin>>u>>v;
        if(a[u][v]==1){
            loang(u,v);
        }
        cout<<datlien<<endl;
    }
}

=======================================================================================
QUY HOACH DAT


#include <bits/stdc++.h>
#define ii pair<int,int>
using namespace std;
const int N=1e3+7;
bool vi[N][N];
char a[N][N];
int dx[]={-1,0,0,1};
int dy[]={0,-1,1,0};
int n,m,dem,ans;
void loang(int i,int j,int x){
    queue<ii> q;
    q.push({i,j});
    vi[i][j]=true;
    while(!q.empty()){
        ii top=q.front();
        q.pop();
        dem++;
        for(int k=0;k<4;k++){
            int i1=top.first+dx[k];
            int j1=top.second+dy[k];
            if(i1>=1 && i1<=n && j1>=1 && j1<=m && a[i1][j1]==x && !vi[i1][j1]){
                q.push({i1,j1});
                vi[i1][j1]=true;
            }
        }
    }
    if(dem>ans){
        ans=dem;
    }
}
int main(){
    int ct=0;
    ans=0;
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>a[i][j];
        }
    }
     for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(!vi[i][j]){
                dem=0;
                loang(i,j,a[i][j]);
                ct++;
            }
        }
    }
    cout<<ct<<endl<<ans;
}

========================================================================

